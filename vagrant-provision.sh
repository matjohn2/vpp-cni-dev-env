#!/bin/bash

set -e
set -o pipefail

# Dependancies for Kubernetes CNI Testbed (Vagrant up)
# Target is Ubuntu 16.04 LTS

## IP Helper function
function int-ip { /sbin/ifconfig $1 | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'; }

## Install Some PreReqs
sudo apt-get install -y apt-transport-https ca-certificates bridge-utils
sudo apt-get update
## Install Docker
sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
sudo cp /vagrant/docker.list /etc/apt/sources.list.d/docker.list

sudo apt-get update
sudo apt-get install -y linux-image-extra-$(uname -r)
sudo apt-get install -y docker-engine
sudo usermod -aG docker ubuntu

## Setup our MASTER
if [[ $(hostname -s) = cni-master* ]]; then
    echo "*** THIS IS A MASTER ***"
    echo "***    Setting up    ***"

    #if /vagrant/ssl/ca.pem already exists. Don't generate new keys.
    if [ ! -f /vagrant/ssl/ca.pem ]; then
      # Generate the root CA.

      openssl genrsa -out /vagrant/ssl/ca-key.pem 2048
      openssl req -x509 -new -nodes -key /vagrant/ssl/ca-key.pem -days 10000 -out /vagrant/ssl/ca.pem -subj "/CN=kube-ca"

      # Generate the API server keypair.
      openssl genrsa -out /vagrant/ssl/apiserver-key.pem 2048
      openssl req -new -key /vagrant/ssl/apiserver-key.pem -out /vagrant/ssl/apiserver.csr -subj "/CN=kube-apiserver" -config /vagrant/ssl/openssl.cnf
      openssl x509 -req -in /vagrant/ssl/apiserver.csr -CA /vagrant/ssl/ca.pem -CAkey /vagrant/ssl/ca-key.pem -CAcreateserial -out /vagrant/ssl/apiserver.pem -days 365 -extensions v3_req -extfile /vagrant/ssl/openssl.cnf

    fi

    #Check our SSL key now esists
    if [ ! -f /vagrant/ssl/ca.pem ]; then
      echo "Our CA Didn't generate. Aborting"
      exit 1
    fi

    # Move SSL keys (needed for master)
    sudo mkdir -p /etc/kubernetes/ssl/
    sudo cp -t /etc/kubernetes/ssl/ /vagrant/ssl/ca.pem /vagrant/ssl/apiserver.pem /vagrant/ssl/apiserver-key.pem

    # Set permissions (needed for master)
    sudo chmod 600 /etc/kubernetes/ssl/apiserver-key.pem
    sudo chown root:root /etc/kubernetes/ssl/apiserver-key.pem

    # Get Kubelet and KubeCTL for master
    sudo wget -N -P /usr/bin http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubectl
    sudo wget -N -P /usr/bin http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubelet
    sudo chmod +x /usr/bin/kubelet /usr/bin/kubectl

    # Configure Kubelet as a SystemD service
    sudo cp -v /vagrant/systemd-manifests/master/kubelet.service /etc/systemd/kubelet.service
    # Enable the unit file so that it runs on boot
    sudo systemctl enable /etc/systemd/kubelet.service
    # Start the kubelet service
    sudo systemctl start kubelet.service

    # Bootstrap our Kubernetes master as containers (onto our local kubelet)
    sudo mkdir -p /etc/kubernetes/manifests
    sudo cp -v /vagrant/kubelet-manifests/master.manifest  /etc/kubernetes/manifests/.
    echo "*** Kubernetes Master Components Scheduled ***"

fi

##ETCD installation for Calico on worker1
if [[ $(hostname -s) = cni-worker1 ]]; then

    echo "*** THIS IS WORKER 1 ***"
    echo "*** Setting up ETCD  ***"

sudo apt-get install -y etcd

sudo cat <<EOF > /etc/default/etcd
ETCD_INITIAL_CLUSTER="cni-worker1=http://192.168.10.21:2380,cni-worker1=http://192.168.10.21:7001"
ETCD_INITIAL_CLUSTER_STATE="new"
ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"
ETCD_INITIAL_ADVERTISE_PEER_URLS="http://192.168.10.21:2380, http://192.168.10.21:7001"
ETCD_LISTEN_PEER_URLS="http://0.0.0.0:2380, http://0.0.0.0:7001"
ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379, http://0.0.0.0:4001"
ETCD_ADVERTISE_CLIENT_URLS="http://192.168.10.21:2379, http://192.168.10.21:4001"
EOF

sudo systemctl restart etcd.service
sudo iptables -A INPUT -p tcp --dport 4001 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 2379 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 2380 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 7001 -j ACCEPT

fi

## Setup our WORKERS
if [[ $(hostname -s) = cni-worker* ]]; then
    echo "*** THIS IS A WORKER ***"
    echo "***    Setting up    ***"

    #Hugetables for VPP
    sysctl -w vm.nr_hugepages=1024

    # Check we already have a CA Cert. If not something went wrong.
    if [ ! -f /vagrant/ssl/ca.pem ]; then
      echo "No CACERT! This should have been generated by now. Exiting."
      exit 1
    fi

    # Needed dependancies for VPP and Calico build.
    sudo apt-get install -y build-essential autoconf libtool shtool cutils bison libffi-dev libssl-dev openjdk-8-jdk libganglia1-dev libapr1-dev libconfuse-dev debhelper dh-systemd ipset conntrack
    sudo apt-get install -y python-dev python-pip

    # Use our VM's IP to generate worker certs.
    WORKER_IP=$(int-ip enp0s8)

    cat <<EOF > /tmp/worker-openssl.cnf
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      subjectAltName = @alt_names
      [alt_names]
      IP.1 = ${WORKER_IP}
EOF

    # Generate keys.
    openssl genrsa -out /tmp/worker-key.pem 2048
    openssl req -new -key /tmp/worker-key.pem -out /tmp/worker.csr -subj "/CN=worker-key" -config /tmp/worker-openssl.cnf
    openssl x509 -req -in /tmp/worker.csr -CA /vagrant/ssl/ca.pem -CAkey /vagrant/ssl/ca-key.pem -CAcreateserial -out /tmp/worker.pem -days 365 -extensions v3_req -extfile /tmp/worker-openssl.cnf

    # Move keys into place
    sudo mkdir -vp /etc/kubernetes/ssl
    sudo cp -t /etc/kubernetes/ssl /tmp/worker-key.pem /vagrant/ssl/ca.pem /tmp/worker.pem

    # Move ssl worker config into place (Redundant, keep on box for future)
    sudo cp /tmp/worker-openssl.cnf /etc/kubernetes/worker-openssl.cnf

    # Enable CNI Working Directories
    sudo mkdir -p /opt/cni/bin/
    sudo mkdir -p /etc/cni/net.d/
    sudo cp -v /vagrant/cni/conf/* /etc/cni/net.d/.
    sudo cp -v /vagrant/cni/bin/* /opt/cni/bin/.

    # Install Kubelet
    sudo wget -N -P /usr/bin http://storage.googleapis.com/kubernetes-release/release/v1.3.0-beta.2/bin/linux/amd64/kubelet
    sudo chmod +x /usr/bin/kubelet
    sudo cp -v /vagrant/systemd-manifests/worker/kubeconfig.yaml /etc/kubernetes/worker-kubeconfig.yaml

cat <<EOF > /tmp/kubelet.service
[Unit]
Description=Kubernetes Kubelet
Documentation=https://github.com/kubernetes/kubernetes
Requires=networking.service
After=docker.service

[Service]
ExecStart=/usr/bin/kubelet \
--address=0.0.0.0 \
--allow-privileged=true \
--cluster-dns=192.168.10.240 \
--cluster-domain=cluster.local \
--config=/etc/kubernetes/manifests \
--hostname-override=${WORKER_IP} \
--api-servers=https://192.168.10.10:443 \
--kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
--tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
--tls-cert-file=/etc/kubernetes/ssl/worker.pem \
--logtostderr=true \
--network-plugin=cni \
--network-plugin-dir=/etc/cni/net.d
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    # Move our systemd manifest for kubelet into place.
    sudo cp -v /tmp/kubelet.service /etc/systemd/kubelet.service

    echo "*** Kubernetes Worker Components Deployed ***"

    echo "*** Getting calicoctl binary and installing ***"
    wget -qO /usr/local/bin/calicoctl http://www.projectcalico.org/builds/calicoctl
    chmod +x /usr/local/bin/calicoctl

    echo "*** Starting VPP Code Download and Compile ***"
    # Download and compile VPP.
    git clone https://gerrit.fd.io/r/vpp
    cd ./vpp/build-root
    sudo ./bootstrap.sh
    make V=0 PLATFORM=vpp TAG=vpp install-deb
    sudo dpkg -i *.deb

    # Compile VPP Python API
    cd /home/ubuntu/vpp/vpp-api/python
    sudo python setup.py install

    echo "*** Starting Calico Code Download and Compile ***"
    # Download and Compile VPP-Calico version of Felix (FIBv2)
    cd /home/ubuntu
    git clone https://github.com/matjohn2/calico.git
    cd calico
    git checkout plugable-devices-fib2
    sudo python setup.py install

    echo "*** Downloading VPP-Calico-Route-Agent and Deps ***"
    cd /home/ubuntu
    git clone https://github.com/the-gigi/conman.git
    cd conman
    sudo pip install -r requirements.txt || true
    sudo python setup.py install
    echo "*** Installing More VPP-Calico-Route-Agent Deps ***"
    cd /home/ubuntu
    git clone https://github.com/matjohn2/vpp-calico-route-agent.git
    cd vpp-calico-route-agent
    sudo pip install -r requirements.txt || true


    echo "*** Letting VPP Claim interface for multihost: enp0s9 ***"
    sudo ifconfig enp0s9 down
    sudo systemctl restart vpp.service
    sudo vppctl sh int

    echo "*** Enable Kubelet Worker ***"
    # Enable and start the unit files so that they run on boot
    sudo systemctl enable /etc/systemd/kubelet.service
    sudo systemctl start kubelet.service

    # Start kube proxy on our workers.
    sudo mkdir -p /etc/kubernetes/manifests/
    sudo cp -v /vagrant/kubelet-manifests/worker/kube-proxy.manifest /etc/kubernetes/manifests/.

    echo "*** WORKER NODE PROVISIONING DONE ***"
    echo "/home/ubuntu contains the VPP-Calico route agent."
    echo "The kubelet worker is configured to use Calico-CNI."
    echo "VPP is installed and running and should have claimed enp0s9 as GigE0/9/0. "
    echo "calico-felix is ready to execute with the VPP FIB2.0 pluggable devices (Python) changes."


fi
